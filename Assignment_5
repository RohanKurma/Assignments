PROBLEM:

Create one Python file in your PythonAnywhere account (name it ipa_5.py) that includes full implementation of the following:

Write a definition for a class named Circle with attributes center and radius, where the center is a Point object and the radius is a number.
Hint: You will also need to provide a definition for a class named Point.

Instantiate a Circle object that represents a circle with its center at (150,100) and a radius 75.

Write a function named point_in_circle that takes a Circle and a Point and returns True if the Point lies in or on the boundary of the circle.

Write a function named rect_in_circle that takes a Circle and a Rectangle and returns True if the Rectangle lies entirely in or on the boundary of the circle.
Hint: You defined Rectangle in your in-class exercises for chapter 10 but you may have to modify your definition for this program.

Write a function named rect_circle_overlap that takes a Circle and a Rectangle and returns True if any of the corners of the Rectangle fall inside the circle.

SOLUTION:

class Circle:
    """ This Circle class takes the coordinates of the center as a Point object
    and the radius of the cirlce.
    It represents the data structure of the circle with
    entries: center and radius
    """

    def __init__(self, center, radius):

        self.center = center
        self.radius = radius

class Point:
    """ This Point class takes the coordinates of x-axis and y-axis.
    It acts as a datastructure to represent a point.
    """

    def __init__(self, x_axis, y_axis):

        self.x = x_axis
        self.y = y_axis

class Rectangle:
    """ This Rectangle class takes four vertices of the rectangle.
    This class doesn't take any angle consideration or base lenght
    or breadth to support angle between edges.
    It simply holds vertexes of the rectangle.
    Because in coordinate geometry it's difficult to automate to obtain the
    vertices of a rectangle without giving its trignometry and base values of
    length and breadth. This is a best approach.

    """

    def __init__(self, vertex1, vertex2, vertex3, vertex4):
        self.v1 = vertex1
        self.v2 = vertex2
        self.v3 = vertex3
        self.v4 = vertex4


def point_in_circle(point, circle):
    """ This function point_in_circle, returns True if the point lies inside the
    circle. False otherwise.

    input:
    point--> Point Object
    circle--> Circle Object.

    output:
    True --> Point inside the circle
    False --> Point outside the circle

    """
    # This is the distance formular derived from
    # d=√((x2 – x1)² + (y2 – y1)²) and √x2+y2=r
    # The above formulas results the distance between two points and the
    # relation between center, external point and the radius.

    distance = (point.x - circle.center.x) ** 2 + (point.y - circle.center.y) ** 2

    if distance <= circle.radius**2:
        return True

    else:
        return False

def rect_in_circle(rectangle, circle):
    """ This function tells us whether a rectangle is in the circle or not.
    input:
    rectangle: Rectangle Object
    circle: Circle Object

    output:
    True --> If the rectangle is in the circle.
    False--> If the rectangle is not in the circle.

    """
    # We use a list called result, which stores the status of all the four
    # vertices of the rectangle are in the circle or not. True if it passes
    # and False otherwise.
    result = []
    # Here we iterate the rectangle object on its vertices using vars() method.
    # vars(object) returns the dictionary of the constructor variables as keys
    # and the values of the variables are values.
    # Since we only need the values to be checked, we use values of this
    # dictionary.
    for v in vars(rectangle).values():
        # Here we pass every vertex of the rectangle to the point_in_circle()
        # function to verify whether the point lies in the circle or not.
        # Once after verifying the point, the return value is appended to the
        # list result.
        result.append(point_in_circle(v, circle))
    # After getting the list result, we check that
    # If all values of the result are True, it clearly states that no point of
    # the rectangle vertices lies outside the circle. Hence the rectangle is
    # inside the circle. So we return True.
    if all(result):
        return True
    else:
        return False

def rect_circle_overlap(rectangle, circle):
    """ This function tells us whether a rectangle overlaps a circle or not.
    input:
    rectangle: Rectangle Object.
    circle: Circle Object.

    output:
    True --> If the rectangle overlaps the circle.
    False --> If the rectangle doesn't overlap the circle.

    """

    # We use a list called result, which stores the status of all the four
    # vertices of the rectangle are in the circle or not. True if it passes
    # and False otherwise.
    result = []
    # Here we iterate the rectangle object on its vertices using vars() method.
    # vars(object) returns the dictionary of the constructor variables as keys
    # and the values of the variables are values.
    # Since we only need the values to be checked, we use values of this
    # dictionary.
    for v in vars(rectangle).values():

        result.append(point_in_circle(v, circle))
    # If any of the result contains False, it means that the rectangle is
    # definetly overlapping the circle. So it returns True.
    if any(result) == False:
        return True
    else:
        return False

if __name__ == '__main__':

    box = Rectangle(Point(50.0,50.0), Point(50.0,0.0), Point(0.0, 50.0),Point(0.0,0.0))

    circle = Circle(Point(150.0, 100.0), 75.0)

    print(circle.center.x)
    print(circle.center.y)
    print(circle.radius)

    print(point_in_circle(box.v1, circle))
    print(rect_in_circle(box, circle))
    print(rect_circle_overlap(box, circle))
